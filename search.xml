<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML总结归纳</title>
    <url>/2020/05/27/01.HTML/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>CSS总结归纳</title>
    <url>/2020/06/19/02.CSS/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>Vue全家桶搭建新闻网站</title>
    <url>/2020/09/13/news-site/</url>
    <content><![CDATA[<h2 id="vue开发环境配置"><a href="#vue开发环境配置" class="headerlink" title="vue开发环境配置"></a>vue开发环境配置</h2><h3 id="关于vue-cli"><a href="#关于vue-cli" class="headerlink" title="关于vue-cli"></a>关于vue-cli</h3><p>vue-cli是一个脚手架工具，它集成了多项前端技术，包括但不限于：</p>
<ul>
<li>webpack</li>
<li>babel</li>
<li>eslint</li>
<li>http-proxy-middleware</li>
<li>typescript</li>
<li>css pre-prosessor</li>
<li>css module</li>
<li>……</li>
</ul>
<p>以上这些工具的使用，依赖于两个东西：</p>
<ul>
<li>node环境</li>
<li>npm包管理器</li>
</ul>
<p>目前，npm已经和node集成，安装node后，会自动安装npm。</p>
<a id="more"></a>

<h3 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h3><h4 id="安装node及npm"><a href="#安装node及npm" class="headerlink" title="安装node及npm"></a>安装node及npm</h4><p>首先通过node.js安装包，一次性完成node和npm的安装。完成后查验是否安装成功</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node -v  <span class="comment"># 返回值为node版本</span></span><br><span class="line">npm -v	<span class="comment"># 返回值为npm版本</span></span><br></pre></td></tr></table></figure>

<h4 id="配置npm源地址"><a href="#配置npm源地址" class="headerlink" title="配置npm源地址"></a>配置npm源地址</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<p>验证地址是否配置成功：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config get registry		<span class="comment"># 返回值为为上一步设置的地址</span></span><br></pre></td></tr></table></figure>

<h4 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<p>验证是否安装成功</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure>

<h4 id="vue-cli的使用"><a href="#vue-cli的使用" class="headerlink" title="vue-cli的使用"></a>vue-cli的使用</h4><ul>
<li><p>进入到要放置工程的文件夹内，打开终端，创建工程文件，例如news-site   </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue create news-site   <span class="comment">#（manual babel package.json）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>进入工程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> news-site</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行开发环境</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run serve	<span class="comment"># 可在返回的http://localhost:8080/地址中预览网页</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行生产环境</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run build	<span class="comment"># 打包代码</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>补充：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i	<span class="comment"># package.json中记录了工程的依赖，可以通过记录重新安装后还原。</span></span><br></pre></td></tr></table></figure>



<h2 id="news-site项目搭建"><a href="#news-site项目搭建" class="headerlink" title="news-site项目搭建"></a>news-site项目搭建</h2><h3 id="项目介绍：使用vue-vuex-vue-router"><a href="#项目介绍：使用vue-vuex-vue-router" class="headerlink" title="项目介绍：使用vue+vuex+vue-router"></a>项目介绍：使用vue+vuex+vue-router</h3><p>vue：数据响应式，组件化开发</p>
<p>vue-router: 根据地址切换不同的组件</p>
<p>vuex：处理共享数据</p>
<h3 id="单页面应用-：无论是访问哪一个地址，实际上对应的页面都是index-html，是唯一的而看到的页面切换，只是在根据不同的地址渲染不同组件的。核心问题1在什么位置切换组件2访问路径如何对应组件"><a href="#单页面应用-：无论是访问哪一个地址，实际上对应的页面都是index-html，是唯一的而看到的页面切换，只是在根据不同的地址渲染不同组件的。核心问题1在什么位置切换组件2访问路径如何对应组件" class="headerlink" title="单页面应用 ：无论是访问哪一个地址，实际上对应的页面都是index.html，是唯一的而看到的页面切换，只是在根据不同的地址渲染不同组件的。核心问题1在什么位置切换组件2访问路径如何对应组件"></a>单页面应用 ：无论是访问哪一个地址，实际上对应的页面都是index.html，是唯一的而看到的页面切换，只是在根据不同的地址渲染不同组件的。核心问题1在什么位置切换组件2访问路径如何对应组件</h3><h3 id="Banner组件"><a href="#Banner组件" class="headerlink" title="Banner组件"></a>Banner组件</h3><h4 id="轮播原理。。。。。。。。。。。。。。。。。。。。"><a href="#轮播原理。。。。。。。。。。。。。。。。。。。。" class="headerlink" title="轮播原理。。。。。。。。。。。。。。。。。。。。"></a>轮播原理。。。。。。。。。。。。。。。。。。。。</h4><h4 id="图片的路径问题"><a href="#图片的路径问题" class="headerlink" title="图片的路径问题"></a>图片的路径问题</h4><p>轮播图中包含多张图片，为了可复用性和书写效率， 使用时不会去固定每张图片的路径，而是使用<code>:band</code>动态绑定+<code>v-for</code>循环的方式去实现。但是写完代码预览时，却发现图片无法正常显示。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件：</span></span><br><span class="line">data() &#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		bannerInfo:[</span><br><span class="line">			&#123;</span><br><span class="line">                src: <span class="string">&quot;./assets/banner/slider1.webp&quot;</span>,</span><br><span class="line">        	&#125;,</span><br><span class="line">		],</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮播图组件： </span></span><br><span class="line">&lt;img v-<span class="keyword">for</span>=<span class="string">&quot;(item, i) in bannerInfo&quot;</span> :key=<span class="string">&quot;i&quot;</span> :src=<span class="string">&quot;item.src&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p><strong>错误原因分析</strong>： <code>:src=&quot;item.src&quot;</code>通过动态绑定的属性得到了一个地址字符串，webpack对该地址字符串没有操作，在打包过后，由于目录结构的变化，无法通过该地址找到对应的图片。</p>
<p><strong>解决思路</strong>：在使用了webpack等打包工具时，应当将图片当做资源模块处理，所以，传递给<code>:src=&quot;item.src&quot;</code>的，应该是一整个图片模块，而不是一个简单的地址。</p>
<p><strong>解法1：在父组件中，直接导入图片</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件：</span></span><br><span class="line"><span class="keyword">import</span> slider1 <span class="keyword">from</span> <span class="string">&#x27;./assets/banner/slider1.webp&#x27;</span>;</span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		bannerInfo:[</span><br><span class="line">			&#123;</span><br><span class="line">                src: slider1,  </span><br><span class="line">        	&#125;,</span><br><span class="line">		],</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解法2：使用require()语法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件：</span></span><br><span class="line">data() &#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		bannerInfo:[</span><br><span class="line">			&#123;</span><br><span class="line">                src: <span class="built_in">require</span>(<span class="string">&quot;./assets/banner/slider1.webp&quot;</span>),	</span><br><span class="line">        	&#125;,</span><br><span class="line">		],</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Channel组件"><a href="#Channel组件" class="headerlink" title="Channel组件"></a>Channel组件</h3><p>es6：promise<br>es7：async和await</p>
<h5 id="通过axios请求获取数据"><a href="#通过axios请求获取数据" class="headerlink" title="通过axios请求获取数据"></a>通过axios请求获取数据</h5><ol>
<li><p>安装axios：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i axios  <span class="comment"># 可在package.json中查验是否成功</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>导入axios:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过axios发送ajax请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config.js中导出APPCODE</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> APPCODE = <span class="string">&quot;*******************&quot;</span>；  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// news.js中导入axios和APPCODE，然后发送ajax请求</span></span><br><span class="line"><span class="keyword">import</span> axiso <span class="keyword">from</span> <span class="string">&#x27;axiso&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;APPCODE&#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span>;</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">&quot;http://ali-news.showapi.com/newsList&quot;</span>, &#123;</span><br><span class="line">	header: &#123;</span><br><span class="line">		Authorization:<span class="string">`APPCODE <span class="subst">$&#123;APPCODE值&#125;</span>`</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>es7：async和await</p>
<p>数据的使用：从请求服务器到拿到数据之间，有一个延迟，所以需要使用异步的方式处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用法1</span></span><br><span class="line">getChannelsList().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法2</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getChannels</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> result = <span class="keyword">await</span> getChannelsList(); </span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getChannels();</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在调用数据界面执行函数，再用如下方式直接导入到main.js测试数据</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./services/covid-19&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h5 id="emit-在不同组件之间传递信号-触发一个事件，并甩出事件相关的数据-chuandixiaoxi"><a href="#emit-在不同组件之间传递信号-触发一个事件，并甩出事件相关的数据-chuandixiaoxi" class="headerlink" title="$emit,在不同组件之间传递信号 触发一个事件，并甩出事件相关的数据 chuandixiaoxi"></a>$emit,在不同组件之间传递信号 触发一个事件，并甩出事件相关的数据 chuandixiaoxi</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.$emit( eventName, […args] )</span><br><span class="line"></span><br><span class="line">eventName：<span class="built_in">String</span>   </span><br><span class="line">[...args]：any[]			</span><br><span class="line">触发事件后，将与此事件相关的参数传到监听器回调</span><br><span class="line">子组件Channel中：a.$emit（eventname, [...args])</span><br><span class="line">父组件App监听事件：&lt;Channel @eventname=<span class="string">&quot;fn&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="News组件"><a href="#News组件" class="headerlink" title="News组件"></a>News组件</h3><p>这个组件中也包含图片，但是并不属于静态资源，所以在使用时可以直接用地址字符串。</p>
<h3 id="loading组件"><a href="#loading组件" class="headerlink" title="loading组件"></a>loading组件</h3><h3 id="header组件"><a href="#header组件" class="headerlink" title="header组件"></a>header组件</h3><h3 id="vue-route"><a href="#vue-route" class="headerlink" title="vue-route"></a><a href="https://router.vuejs.org/zh/">vue-route</a></h3><p>安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i vue-router</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router	//daoru</span></span><br><span class="line"><span class="string">Vue.use(VueRouter);    //shiyong</span></span><br><span class="line"><span class="string">var router = new VueRouter(&#123;	//peizhi</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>



<h4 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h4><p>找到要切换的组件位置，添加<router-view></router-view>组件,该组件可以根据不同的访问路径，渲染对应 组件 </p>
<p>路由模式 采用histroy模式</p>
<ul>
<li><p>hash：路径来自于地址栏中#后面的部分，这种模式兼容性较好  默认不会刷新???</p>
<ul>
<li>onhashchange事件，可以在windows对象上监听这个事件:</li>
</ul>
</li>
</ul>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">windows.onhashchange = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.oldURL,event.newURL);</span><br><span class="line"><span class="keyword">let</span> hash = location.hasg  <span class="comment">//通过location对象来获取hash地址</span></span><br><span class="line"><span class="built_in">console</span>.log(hash)  <span class="comment">// #/notebooks/123456/list  地址从#号开始</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  hash发生变化的url都会被浏览器记录下来，从而会发现浏览器的前进后退都可以用. 只能改变#后面的url片段，</p>
<ul>
<li><p>history：路径来自于真实的地址路径，旧浏览器不兼容 在就浏览器中这种操作会导致刷新页面，与我们使用router-view的初衷相违背</p>
<ul>
<li>history api可以分为两大部分，切换和修改<br>切换历史状态<br>包括 back,forward,go三个方法，对应浏览器的前进，后退，跳转操作。很多小伙伴只知道浏览器有前进和后退，其实在前进后退上长按鼠标，会弹出历史记录，从而完成跳转.</li>
</ul>
</li>
</ul>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">history.<span class="keyword">go</span>(<span class="number">-2</span>); <span class="comment">//后退两次</span></span><br><span class="line">history.<span class="keyword">go</span>(<span class="number">2</span>);<span class="comment">//前进两次</span></span><br><span class="line">history.back();<span class="comment">//后退</span></span><br><span class="line">history.forward();前进</span><br></pre></td></tr></table></figure>

<p>  修改历史状态<br>   包括了pushState,replaceState两个方法，这两个方法接受三个参数：stateObj,title,url</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">history</span><span class="selector-class">.pushState</span>(&#123;<span class="attribute">color</span>:<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;red&#x27;</span>&#125;)</span><br><span class="line"><span class="selector-tag">history</span><span class="selector-class">.back</span>();</span><br></pre></td></tr></table></figure>

<p>  通过pushstate把页面的状态保存在state对象中，当页面的url再变回这个url时，可以通过event.state取到这个state对象.<br>   history 模式的补充<br>   对于vue开发的单页面应用，我们在切换不同的页面的时候，可以发现html永远只有一个，这也真是称之为单页面的原因，而vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。而当开启history模式的时候，如果后端不进行任何处理，在Dev阶段一切都是正常的，可是打包之后，访问路径则会返回404，因此要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是app 依赖的页面。</p>
<ul>
<li>abstract：路径来自于内存</li>
</ul>
<p>要切换的组件按需加载，避免浪费系统资源</p>
<p>路由：按需加载组件</p>
<p>可变地址：动态路由</p>
<h4 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h4><p>避免页面刷新</p>
<p>打开浏览器–&gt;输入地址–&gt;dns解析域名–&gt;访问服务器–&gt;将HTML CSS JS等下载本地，浏览器渲染页面，执行js–&gt;创建vue实例–&gt;渲染根组件–&gt;router-view根据不同路径渲染不同的子组件</p>
<p>每次页面刷新以后,相当于整个流程再一次执行.所以最好的方式就是只切换不同的组件进行渲染,不刷新页面</p>
<p>history+router-link配合</p>
<p>原理是阻止了a元素的默认事件</p>
<p>声明式导航 本次采用这种方式</p>
<p>编程式导航 暂不涉及</p>
<p>1.router 在使用vuerouter时就要创建的一个路由对象.相当于一个路由器的角色.  this.$router  router-link router-view</p>
<p>2.route 一条路由  当前激活的这条的路由  this$route查看这条路由的状态信息</p>
<p>3.routes一组路由的配置的集合</p>
<p>router自带的两种样式 精确匹配和模糊匹配</p>
<p>:new=”news”  导致出现_observe_， 为什么？</p>
<p>点击下一页 页面从顶部开始展示？</p>
<p>首页–》国内焦点：</p>
<p>1.一开始页面渲染的是Home.vue组件2</p>
<p>2.国内焦点点击后</p>
<p>3.销毁home组件</p>
<p>4.创建和加载channelnews组件</p>
<p>但是在国内焦点–》国际焦点</p>
<p>1.一开始页面渲染的是channelnews组件</p>
<p>2.点击国际焦点</p>
<p>3.由于是同一个，所以组件不会销毁和重新渲染  所以声明周期中的created不会运行，导致无法正常切换页面</p>
<p>因此需要引入watch，用来监控数据的变化</p>
<p>this.route: 当前路径的一些路由规则 数据 参数</p>
<p> this.$router：提供一些路由方法</p>
<p>数据管理</p>
<p>多个组件如何共享同一份数据？</p>
<p>其中一个组件修改了数据后，如何让其他组件知道？</p>
<p>数据提升  所有数据放在根组件，子组件需要时一层一层向下传递。数据要修改时，子组件通过实践，一层一层向上传递，直到根组件处数据更新后，在此向下逐级传递新数据、</p>
<p>为解决上述为题，vuex应用而生</p>
<p>主要管理共享数据和变化非常复杂的数据</p>
<p>安装</p>
<p>npm i vuex</p>
<p>如何在组建中使用vuex仓库中的数据？  参考header中三种写法</p>
<p>如何改动仓库中的数据？ 不能直接在组件中修改  改动必须commint 一个 mutation。这是数据变化的唯一原因。</p>
<p>mutation中不能出现副作用操作。</p>
<p>副作用是：</p>
<p>1.使用与state和payload无关的外部数据</p>
<p>2.ajax远程请求</p>
<p>3.html的loaclstorage</p>
<p>4.其他异步请求 async之类的</p>
<p>不可避免副作用时，使用action。dispatch触发action</p>
<p>mutation改变仓库：传递payload参数，运行commit函数，在store中拿到那之前的状态，进行更新。再讲最新的状态传递回store </p>
<p>action：</p>
<p>页面中有多个显示新闻频道的地方，每次都需要通过网络请求获取数据。</p>
<p>改用vuex数据仓库，只需要一次网络请求，需要用数据的时候从仓库中获取即可</p>
<p>用户登录</p>
<p>跨域：主机名，端口号，协议，其中之一不同时发生跨域。<br>能否跨域由服务器设定决定，当不允许跨域时，需要用到代理。<br>在开发服务器设置代理，由代理去请求生产服务器。请求到结果后再由代理转到浏览器</p>
<p>跨域主要是浏览器产生的，脱离浏览器</p>
<p>用户令牌保存在localstorag  </p>
<p>sessionstorage cookie cache 之间的区别？</p>
<p>注册界面报错信息太多，使用组件化 </p>
<p>因此尝试做一个自己的组件库练手</p>
<p>两次密码一致后，在更改第一次的密码，重复密码不会报错？怎么解决</p>
<p>应该使用watch监测</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>Github Pages + Hexo框架下theme-NexT搭建博客</title>
    <url>/2020/09/19/next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol>
<li><p>Github账号注册</p>
</li>
<li><p>Git安装文件</p>
<p>直接从官网下载速度极慢，通过这个国内的下载站快速下载 (<a href="https://github.com/git-for-windows/git/releases/">https://github.com/git-for-windows/git/releases/</a>)</p>
</li>
<li><p>Node.js安装文件</p>
</li>
</ol>
<p>本次搭建环境：Windows10 64位操作系统，Git-2.28.0，node -v14.11.0.</p>
<a id="more"></a>



<h2 id="Github新建仓库"><a href="#Github新建仓库" class="headerlink" title="Github新建仓库"></a>Github新建仓库</h2><ol>
<li><p>在Github新建一个repository，取名：username.github.io    （username是Github用户名）</p>
</li>
<li><p>选择通过<code>README</code>文件，初始化仓库</p>
</li>
<li><p>在本仓库内选择<code>Settings</code>选项，下拉至<code>Github Pages</code>选项处，<code>Source</code>选项选择 <code>master</code>。完成后<code>Github Pages</code>选项框内会更新一个地址，通过此地址即可访问博客。当然现阶段博客内还没有任何内容。</p>
</li>
</ol>
<h2 id="Git安装配置"><a href="#Git安装配置" class="headerlink" title="Git安装配置"></a>Git安装配置</h2><p>通过安装包直接安装，在不了解配置选项含义的情况下，选择默认项。安装完成后，打开Git Bash，进行配置账户。</p>
<ol>
<li><p>配置用户名 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;name&quot;</span>	<span class="comment"># &quot;name&quot;是github用户名</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置邮箱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;email&quot;</span>	<span class="comment"># &quot;email&quot;是github注册邮箱</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成密钥 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;email&quot;</span>	<span class="comment"># &quot;email&quot;是github注册邮箱   </span></span><br><span class="line"><span class="comment"># 输入命令后，可以直接回车跳过其余步骤，直到命令执行完成</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看秘钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator\.ssh</span><br></pre></td></tr></table></figure>

<p>此路径下包含两个文件，<code>id_rsa</code> 是私钥，<code>id_rsa.pub</code> 是公钥。打开<code>id_rsa.pub</code>，复制全部内容。</p>
</li>
<li><p>添加秘钥</p>
<p>打开Github，在菜单栏<code>Settings</code>选项下，找到<code>SSH Keys</code>选项，将复制的秘钥粘贴在<code>key</code>文本框内，点击<code>Add Key</code>。</p>
</li>
</ol>
<h2 id="Node及Hexo安装"><a href="#Node及Hexo安装" class="headerlink" title="Node及Hexo安装"></a>Node及Hexo安装</h2><ol>
<li><p>通过安装包安装Node.js</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v   <span class="comment"># 显示版本号即为成功</span></span><br><span class="line">npm -v	  <span class="comment"># npm集成在Node中一同安装，通过版本号查验</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>通过npm安装Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个要放置博客的文件夹，例如<code>blog</code>，在此目录下打开Git Bash执行操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init	<span class="comment"># 初始化</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行完毕后，<code>blog</code>文件夹内下会生成一系列文件<br>注意：其中有一个配置文件：<code>_config.yml</code>，将其称为<strong>站点配置文件</strong>，用于设置博客的属性。</p>
</li>
<li><p>继续在Git Bash内操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate    <span class="comment"># 生成静态文件</span></span><br><span class="line">hexo server    <span class="comment"># 在本地服务器运行</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用终端内提示的IP地址 <a href="http://localhost:4000/">http://localhost:4000</a> 即可预览博客</p>
</li>
</ol>
<p>补充：Hexo常用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g    <span class="comment"># 等同于hexo generate 生成静态文件</span></span><br><span class="line">hexo s    <span class="comment"># 等同于hexo server 在本地服务器运行</span></span><br><span class="line">hexo d    <span class="comment"># 等同于hexo deploy 部署至服务器</span></span><br><span class="line">hexo clean    <span class="comment"># 清理Hexo缓存，使配置文件生效</span></span><br></pre></td></tr></table></figure>



<h2 id="NexT主题安装"><a href="#NexT主题安装" class="headerlink" title="NexT主题安装"></a>NexT主题安装</h2><p>在blog文件夹下，打开Git Bash执行操作</p>
<ol>
<li><p>将NexT主题克隆至<code>themes/next</code>文件夹中，后续对博客主题相关的操作都在<code>next</code>文件夹内进行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next </span><br></pre></td></tr></table></figure>
</li>
<li><p>打开<strong>站点配置文件</strong>，配置属性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: next    <span class="comment"># 将主题设置为next</span></span><br><span class="line"></span><br><span class="line">deploy:    <span class="comment"># 设置要部署的仓库  </span></span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/username/username.github.io.git   <span class="comment"># username替换为自己的用户名</span></span><br><span class="line">  branch: master</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Git部署插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署至Github</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>至此，通过模板搭建博客完成。现在可以通过Github Pages提供的地址访问博客了。</p>
<p>参考：<br>Hexo中文文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a><br>NexT使用文档：<a href="http://theme-next.iissnan.com/">http://theme-next.iissnan.com/</a></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>Vue归纳总结</title>
    <url>/2020/08/22/vue/</url>
    <content><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><p>vue可以解决的核心问题————-复杂的DOM操作</p>
<p><strong>vue特点：</strong></p>
<p>渐进式：可以仅仅在某些页面或者页面某些部分使用vue</p>
<p>组件化：</p>
<p>响应式：</p>
<p><strong>使用Vue的两种方式：</strong></p>
<p>在页面中引入vue的js文件</p>
<p>通过脚手架</p>
<a id="more"></a>



<p>ui库： elementui</p>
<p>状态管理：vuex</p>
<p>路由：vue-router</p>
<p>请求：axios</p>
<p>脚手架：vue-cli</p>
<p>调试工具：vue-devtools</p>
<p>es6find函数</p>
<p>属性：别人的 props</p>
<p>数据： 自己的 data  为什么用函数的形式反悔</p>
<p>methods</p>
<p>computed</p>
<p>什么时候用函数  什么时候用对象</p>
<p>具名到处和不具名 导出区别</p>
<p>Authorization  token</p>
<p>sessionStorage</p>
<p>虚拟dom</p>
<p>组件之间的通信：</p>
<p>父组件——–数据——–&gt;子组件 props</p>
<p>子组件——–事件——–&gt;父组件 emit</p>
<h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><img src="E:\Aweb\web-projects\vue\组件生命周期.PNG" alt="组件生命周期" style="zoom: 50%;" /> 

<p>针对上图生命周期序号下表进行解释：</p>
<p>1.new vue() : 这是new了一个vue的实例对象；此时就会进入组件的创建过程。</p>
<p>2.Init Events &amp; Lifecycle ：初始化组件的事件和生命周期函数；当执行完这一步之后，组件的生命周期函数就已经全部初始化好了，等待着依次去调用。</p>
<p>3.beforeCreate ：</p>
<p><strong>官方说明：</strong>在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</p>
<p>解释：这是第一个生命周期函数；此时，组件的data和methods以及页面DOM结构，都还没有初始化；所以此阶段，什么都做不了。</p>
<p>4.Init injections &amp; reactivity ：这个阶段中，正在初始化data和methods中的数据以及方法。</p>
<p>5.created ：</p>
<p><strong>官方说明：</strong>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p>
<p>解释：这个组件创建阶段第二个生命周期函数，此时，组件的data和methods已经可以用了；但是页面还没有渲染出来；在这个生命周期函数中，我们经常会发起Ajax请求；</p>
<p>6.正在解析模板结构，把data上的数据拿到，并且解析执行模板结构汇总的指令；当所有指令被解析完毕，那么模板页面就被渲染到内存中了；当模板编译完成，我们的模板页面，还没有挂载到页面上，只是存在于内存中，用户看不到页面；</p>
<p>7.beforeMount :</p>
<p><strong>官方说明：</strong>在挂载开始之前被调用：相关的 render 函数首次被调用。</p>
<p>解释：当模板在内存中编译完成，会立即执行实例创建阶段的第三个生命周期函数，这个函数就是beforeMount，此时内存中的模板结构，还没有真正渲染到页面上；此时，页面上看不到真实的数据，用户看到的只是一个模板页面而已；</p>
<p>8.这一步把正在内存中渲染好的模板结构替换到页面上；</p>
<p>9.mounted ：</p>
<p><strong>官方说明：</strong>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。 </p>
<p>解释：mounted是组件创建阶段最后的一个生命周期函数；此时，页面已经真正的渲染好了，用户可以看到真实的页面数据了；当这个生命周期函数执行完，组件就离开了创建阶段，进入到了运行中的阶段；如果大家使用到一些第三方的UI插件，而且这个插件还需要被初始化，那么，必须在mounted中来初始化插件；</p>
<p>10.组件运行汇总的生命周期函数；组件运行中的生命周期函数，会根据data数据的变化，有选择性的被触发0次货N次；</p>
<p>11.beforeUpdate ：</p>
<p><strong>官方说明：</strong>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>
<p>解释：在执行beforeUpdate运行中的生命周期函数的时候，数据肯定是最新的；但是页面上呈现的数据还是旧的</p>
<p>12.正在根据最新的data数据，重新渲染内存中的的模板结构；并把渲染好的模板结构替换到页面上</p>
<p>13.updated ： </p>
<p><strong>官方说明：</strong>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</p>
<p>解释：页面也完成了更新，此时，data数据是最新的，同时，页面上呈现的数据也是最新的。</p>
<p>14.beforeDestroy ：</p>
<p><strong>官方说明：</strong>实例销毁之前调用。在这一步，实例仍然完全可用。</p>
<p>解释：当执行beforeDestroy的时候，组件即将被销毁，但是还没有真正开始销毁，此时组件还是正常可用的；data、methods等数据或方法，依旧可以被正常访问</p>
<p>15.销毁过程</p>
<p>16.destroyed ：</p>
<p><strong>官方说明：</strong>vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>
<p>解释：组件已完成了销毁，组件无法使用，data和methods都不可使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;input  v-model=<span class="string">&quot;message&quot;</span>/&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;clickfun&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> myVue = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                message: <span class="string">&#x27;XXXX&#x27;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;beforeCreate 创建前状态===============》&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> state = &#123;</span><br><span class="line">                <span class="string">&#x27;el&#x27;</span>: <span class="built_in">this</span>.$el,</span><br><span class="line">                <span class="string">&#x27;data&#x27;</span>: <span class="built_in">this</span>.$data,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span>: <span class="built_in">this</span>.message</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(state);</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;created 创建完毕状态===============》&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> state = &#123;</span><br><span class="line">                <span class="string">&#x27;el&#x27;</span>: <span class="built_in">this</span>.$el,</span><br><span class="line">                <span class="string">&#x27;data&#x27;</span>: <span class="built_in">this</span>.$data,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span>: <span class="built_in">this</span>.message</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(state);</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        beforeMount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;beforeMount 挂载前状态===============》&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> state = &#123;</span><br><span class="line">                <span class="string">&#x27;el&#x27;</span>: <span class="built_in">this</span>.$el,</span><br><span class="line">                <span class="string">&#x27;data&#x27;</span>: <span class="built_in">this</span>.$data,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span>: <span class="built_in">this</span>.message</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(state);</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;mounted 挂载结束状态===============》&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> state = &#123;</span><br><span class="line">                <span class="string">&#x27;el&#x27;</span>: <span class="built_in">this</span>.$el,</span><br><span class="line">                <span class="string">&#x27;data&#x27;</span>: <span class="built_in">this</span>.$data,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span>: <span class="built_in">this</span>.message</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(state);</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        beforeUpdate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;beforeUpdate 更新前状态===============》&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> state = &#123;</span><br><span class="line">                <span class="string">&#x27;el&#x27;</span>: <span class="built_in">this</span>.$el,</span><br><span class="line">                <span class="string">&#x27;data&#x27;</span>: <span class="built_in">this</span>.$data,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span>: <span class="built_in">this</span>.message</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(state);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;beforeUpdate == &#x27;</span> + <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>)[<span class="number">0</span>].innerHTML);</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        updated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;updated 更新完成状态===============》&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> state = &#123;</span><br><span class="line">                <span class="string">&#x27;el&#x27;</span>: <span class="built_in">this</span>.$el,</span><br><span class="line">                <span class="string">&#x27;data&#x27;</span>: <span class="built_in">this</span>.$data,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span>: <span class="built_in">this</span>.message</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(state);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;updated == &#x27;</span> + <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>)[<span class="number">0</span>].innerHTML);</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        beforeDestroy: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;beforeDestroy 销毁前状态===============》&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> state = &#123;</span><br><span class="line">                <span class="string">&#x27;el&#x27;</span>: <span class="built_in">this</span>.$el,</span><br><span class="line">                <span class="string">&#x27;data&#x27;</span>: <span class="built_in">this</span>.$data,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span>: <span class="built_in">this</span>.message</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(state);</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        destroyed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;destroyed 销毁完成状态===============》&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> state = &#123;</span><br><span class="line">                <span class="string">&#x27;el&#x27;</span>: <span class="built_in">this</span>.$el,</span><br><span class="line">                <span class="string">&#x27;data&#x27;</span>: <span class="built_in">this</span>.$data,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span>: <span class="built_in">this</span>.message</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(state);</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            clickfun() &#123;</span><br><span class="line">                myVue.$destroy()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>







<ol>
<li>beforeCreated （）：发生在组件注入前，此时无提取的信息，无响应式</li>
<li>created（）：</li>
</ol>
<h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><h5 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h5><p>hash:  路径来自于地址栏中的#后面的值,兼容性较好</p>
<p>history: 路径来自于真实的地址,就浏览器不兼容</p>
<p>abstract: 路径来自于内存</p>
<h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><p>数据的配置 state</p>
<p>数据的改动:必须要提交mutation</p>
<p>数据共享</p>
<p>组件化开发的好处</p>
<h5 id="页面刷新过程"><a href="#页面刷新过程" class="headerlink" title="页面刷新过程:"></a>页面刷新过程:</h5><p><strong>浏览器</strong> 通过 <strong>地址</strong> 访问 <strong>服务器</strong>, 下载html,css,js文件,浏览器渲染页面,执行js,创建vue实例,渲染根组件,router-view根据不同路径渲染相应组件</p>
<h5 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h5>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
</search>
